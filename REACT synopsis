#Можно работать сразу:

npm install -g create-react-app

create-react-app my-app
cd my-app/
npm start

Работаем в localhost:3000

Без бабеля - не заработает:
babel-preset-react

Обязательно нужен импорт библиотек:
import React from 'react';
import ReactDOM from 'react-dom';

export default class Hello extends React.Component {
  render() {
    return <div>Hello</div>;
  }
}

const mountNode = document.getElementById('react-root');
ReactDOM.render(<Hello />, mountNode);

##JSX

Позволяет писат HTML прямо внутри без специальных знаков.
Теперь давайте соберем все вместе. Сам jsx – это выражение, а чтобы встроить выражение на JS внутрь jsx нужно использовать фигурные скобки
const name = 'Eva';
const vdom1 = <div>Hello, {name}</div>;

const vdom = <div>
    {isAdmin ? <p><a href="#">{text}</a></p> : <p>{text}</p>}
    <Hello />
  </div>;
  
  Внутри jsx нельзя использовать условную конструкцию.
  **NB! имеется ввиду -внутри тега? а как свойства - можно?**
  
  То есть null – это допустимое значение, которое рассматривается Реактом как пустой компонент. Точно так же игнорируются и false, true, undefined.
  
 ## Передавать данные в компоненты можно, и делается это с помощью механизма props:
  Снаружи свойства передаются как атрибуты в html, а внутри доступны через props
class HelloMessage extends React.Component {
  render() {
    return <div>Hello {this.props.name}</div>;
  }
}

ReactDOM.render(
  <HelloMessage name="Jane" />,
  document.getElementById('react-root'),
);

То же касается className.
 Главное что нужно запомнить при работе с props: их нельзя изменять. 
 
 ##SPREAD
 
 Можно передавать объект, используя механизм spread:
 
 const params = {
  className: 'row',
  title: 'name',
}
const name = 'Eva';
const vdom = <div id="container" {...params}>
  Hello, {name}
</div>;


Значения props по умолчанию: проще всего прямо в render:
const title = this.props.title || 'hi!';

Но есть и другой способ:

class Header extends React.Component {
  static defaultProps = {
    text: 'Hello, world!',
  };

  render() {
    return (
      <h1>{this.props.text}</h1>
    );
  }
}

##Коллекции
ПРи работе с коллекциями в react рекомендуется идентифицировать каждую строку своим ключом key,
key={item.id}
key={index}

##ROOT
Раньше это было не так, но сейчас допустимо из компонента возвращать массив компонентов. Реакт сам правильно вставит их DOM:

class List extends React.Component {
  render() {
    const data = this.props.data
    const f = item => <div key={item.id}>{item.name}</div>;

    return data.map(f);
  }
}

##Различия jsx и html
В jsx все свойства DOM и аттрибуты (включая обработчики событий) должны быть записаны в camelCase. Например, аттрибут tabindex превращается в tabIndex. Исключением являются aria- и _data-_аттрибуты, они записываются точно так же, как и в обычном html.

htmlFor
Так как for — зарезирвированное слово в js, в элементах реакта используется свойство htmlFor.


Все содержимое тегов экранируется. для вывода без экранирования нужно использовать свойство dangerouslySetInnerHTML.

### Стили.
 тег style - это **объект**
 const divStyle = {
      color: 'blue',
      fontSize: '50px',
    };
    
### Значение свойств по-умолчанию
Если свойство передается в компонент без значения, то оно автоматически становится равным true.

Примеры ниже эквивалентны:

<MyTextBox autocomplete />

<MyTextBox autocomplete={true} />
При этом, предпочтительным является первый вариант.

## Работа с именами классов
Работая напрямую с dom, можно использовать classList, который содержит удобные методы для добавления и удаления классов
Свойство className — всего лишь строка со всеми вытекающими последствиями.

class Button extends React.Component {
  render () {
    let btnClass = 'btn';
    if (this.props.isPressed) {
      btnClass += ' btn-pressed';
    } else if (this.state.isHovered) {
      btnClass += ' btn-over';
    }
    return <button className={btnClass}>{this.props.label}</button>;
  }
};

Для решения этой задачи создатели Реакта рекомендуют использовать пакет classnames. Принцип его работы прост: вместо манипулирования строчкой напрямую нужно сформировать правильный объект, который уже будет преобразован в строку.

import cn from 'classnames'

class Button extends React.Component {
  render () {
    const btnClass = cn({
      btn: true,
      'btn-pressed': this.state.isPressed,
      'btn-over': !this.state.isPressed && this.state.isHovered,
    });
    return <button className={btnClass}>{this.props.label}</button>;
  }
};
Иногда имя класса генерируется динамически, тогда можно использовать следующий код:

const buttonType = 'primary';
const class = cn({
  [`btn-${buttonType}`]: true,
});

## CHildren
Свойство, куда попадают все дочерние элементы, причем если элемент один, он попадет туда сам по себе.
Все, что находится между открывающим и закрывающим тегом, попадает внутрь свойства children.

Но будьте бдительны: тип данных свойства children зависит от содержимого. В простейшем случае, когда тег используется как одиночный <div />, это свойство будет равно undefined.

Если этим содержимым является строчка, то именно она окажется внутри children. Правда, после некоторой обработки. JSX удаляет концевые пробелы и пустые строки.
Есть набор функций, доступных через React.Children.
Например React.Children.map();

##События и состояние
State - состояние, должен быть объектом

Например счётчик:
class Counter extends React.Component {
  state = { count: 0 };

  onClick = () => {
    const count = this.state.count;
    this.setState({ count: count + 1 });
  };
  
  render() {
    return <button onClick={this.onClick}>
      count: {this.state.count}
    </button>;
  }
}

ReactDOM.render(
  <Counter />,
  document.getElementById('react-root'),
);
 
 ###Аналогично будет:
class Component extends React.Component {
  constructor(props) {
    super(props); // всегда обязательно
    this.state = { count: 0 };
  }
}

Обратите внимание на то, что это единственное место, где state может изменятся напрямую (точнее, создаваться). Во всех остальных местах this.state должен использоваться только для чтения! (подробнее дальше)
На кнопку вешается обработчик на клик. В отличие от html, в свойство onClick передается функция, и она вызовется автоматически в момент срабатывания события. Внутри обработчика читается текущее значение счетчика, к нему прибавляется единица и далее идет установка нового состояния. Повторюсь: крайне важно не изменять state напрямую. Для установки нового состояния в реакте предусмотрена функция setState. Именно ее вызов приводит к тому, что компонент, в конце концов, перересуется. Происходит это не сразу, то есть setState работает асинхронно и внутренняя магия пытается оптимизировать процесс рисования.

##Инициализация и setState

примеры кстати на моём codepen
https://codepen.io/fedodd/pen/bYpeGq
https://codepen.io/fedodd/pen/OONXJR

В данном примере объект состояния включает два свойства: count для одной кнопки и primary для другой. Основная хитрость этого примера заключается в процессе обновления состояния:

// первая кнопка
this.setState({ count: count + 1 });

// вторая кнопка
this.setState({ primary: !primary });
Функция setState не просто принимает на вход новое состояние. Она заменяет значения ключей в предыдщуем состоянии на значения этих же ключей в новом состоянии. То что передано не было - не трогается. То есть, в нашем случае мы передавали только то, что изменяли. На практике это поведние крайне удобно, иначе пришлось бы каждый раз выполнять работу по слиянию старого состояния с новым руками.

Структура объекта состояния
Общая рекомендация, которую дают разработчики Реакта, это делать структуру максимально плоской, похожей на то, как мы храним данные в базе данных. Причем, желательно, в хорошо нормализованном виде. Другими словами, не нужно дублировать данные в состоянии. Пример:


const state = {
  articles: [/*...*/],
  comments: [/*...*/],
}

###События
Реакт перехватывает события, которые происходят в браузере
Поэтому правильно сохранять в стейте не сам объект события, а его свойства.

Как правило, само событие используется не часто. Например при кликах, обычно, важен сам факт клика, а не его параметры, такие как координаты места возникновения. С другой стороны, событие нужно часто для предотвращения действия по умолчанию. Действительно, если ничего не предпринимать, то после клика страница будет перезагружена. В этом смысле ничего нового. И без Реакта все работает так же. Ниже правильный способ обработки такой ситуации:
class Component extends React.Component {
  state = { count: 0 };

  onClick = (e) => {
    e.preventDefault();
    this.setState({ count: this.state.count + 1 });
  };

  render() {
    return <a href="#" onClick={this.onClick}>click {this.state.count}</a>;
  }
}

ReactDOM.render(
  <Component />,
  document.getElementById('react-root'),
);
Второй момент, который может пугать разработчиков, это навешивание обработчиков прямо в JSX. Не лишний раз будет напомнить, что JSX — это JS-код, а не HTML. Поэтому нет никакой проблемы. Как вы увидите позже, такой код очень просто читать, потому что все находится в одном месте.

React нормализует события так, что они имеют консистентные свойства в различных браузерах. Кроме того, в формах добавляется событие onChange, которое ведет себя в соответствии со своим названием и сильно упрощает работу.

 
